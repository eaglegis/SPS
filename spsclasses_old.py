#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Tue Jul 31 13:38:21 2018 by generateDS.py version 2.29.19.
# Python 3.6.5 |Anaconda, Inc.| (default, Mar 29 2018, 13:32:41) [MSC v.1900 64 bit (AMD64)]
#
# Command line options:
#   ('-f', '')
#   ('-o', 'c:/zzcloud/dropbox/work/sps/sps/spsclasses.py')
#   ('-s', 'c:/zzcloud/dropbox/work/sps/sps/spssubclasses.py')
#   ('--super', 'spsclasses')
#   ('--export', 'write etree')
#
# Command line arguments:
#   c:/zzcloud/dropbox/work/sps/sps/spsschema.xml
#
# Command line:
#   C:/Users/fsh/AppData/Roaming/Python/Python36/Scripts/generateDS.py -f -o "c:/zzcloud/dropbox/work/sps/sps/spsclasses.py" -s "c:/zzcloud/dropbox/work/sps/sps/spssubclasses.py" --super="spsclasses" --export="write etree" c:/zzcloud/dropbox/work/sps/sps/spsschema.xml
#
# Current working directory (os.getcwd()):
#   arcgispro-py3
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = str
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

def parsexmlstring_(instring, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    element = etree_.fromstring(instring, parser=parser, **kwargs)
    return element

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                if ExternalEncoding:
                    encoding = ExternalEncoding
                else:
                    encoding = 'utf-8'
                return instring.encode(encoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = ''
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class inspections(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, inspection=None):
        self.original_tagname_ = None
        if inspection is None:
            self.inspection = []
        else:
            self.inspection = inspection
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, inspections)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if inspections.subclass:
            return inspections.subclass(*args_, **kwargs_)
        else:
            return inspections(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_inspection(self): return self.inspection
    def set_inspection(self, inspection): self.inspection = inspection
    def add_inspection(self, value): self.inspection.append(value)
    def insert_inspection_at(self, index, value): self.inspection.insert(index, value)
    def replace_inspection_at(self, index, value): self.inspection[index] = value
    def hasContent_(self):
        if (
            self.inspection
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='inspections', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('inspections')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='inspections')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='inspections', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='inspections'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='inspections', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for inspection_ in self.inspection:
            inspection_.export(outfile, level, namespace_, name_='inspection', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='inspections', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        for inspection_ in self.inspection:
            inspection_.to_etree(element, name_='inspection', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'inspection':
            obj_ = inspectionType.factory()
            obj_.build(child_)
            self.inspection.append(obj_)
            obj_.original_tagname_ = 'inspection'
# end class inspections


class inspectionType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, serialNumber=None, forestManager=None, location=None, stand=None, siteId=None, subSite=None, bioRegion=None, siteType=None, date=None, inspector=None, hostSpec=None, estabYear=None, treatment=None, stemsPerHa=None, diam=None, height=None, inspType=None, sampleType=None, comments=None, points=None, disorders=None, identifications=None):
        self.original_tagname_ = None
        self.serialNumber = serialNumber
        self.forestManager = forestManager
        self.location = location
        self.stand = stand
        self.siteId = siteId
        self.subSite = subSite
        self.bioRegion = bioRegion
        self.siteType = siteType
        self.date = date
        self.inspector = inspector
        self.hostSpec = hostSpec
        self.estabYear = estabYear
        self.treatment = treatment
        self.stemsPerHa = stemsPerHa
        self.diam = diam
        self.height = height
        self.inspType = inspType
        self.sampleType = sampleType
        self.comments = comments
        self.points = points
        self.disorders = disorders
        self.identifications = identifications
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, inspectionType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if inspectionType.subclass:
            return inspectionType.subclass(*args_, **kwargs_)
        else:
            return inspectionType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_serialNumber(self): return self.serialNumber
    def set_serialNumber(self, serialNumber): self.serialNumber = serialNumber
    def get_forestManager(self): return self.forestManager
    def set_forestManager(self, forestManager): self.forestManager = forestManager
    def get_location(self): return self.location
    def set_location(self, location): self.location = location
    def get_stand(self): return self.stand
    def set_stand(self, stand): self.stand = stand
    def get_siteId(self): return self.siteId
    def set_siteId(self, siteId): self.siteId = siteId
    def get_subSite(self): return self.subSite
    def set_subSite(self, subSite): self.subSite = subSite
    def get_bioRegion(self): return self.bioRegion
    def set_bioRegion(self, bioRegion): self.bioRegion = bioRegion
    def get_siteType(self): return self.siteType
    def set_siteType(self, siteType): self.siteType = siteType
    def get_date(self): return self.date
    def set_date(self, date): self.date = date
    def get_inspector(self): return self.inspector
    def set_inspector(self, inspector): self.inspector = inspector
    def get_hostSpec(self): return self.hostSpec
    def set_hostSpec(self, hostSpec): self.hostSpec = hostSpec
    def get_estabYear(self): return self.estabYear
    def set_estabYear(self, estabYear): self.estabYear = estabYear
    def get_treatment(self): return self.treatment
    def set_treatment(self, treatment): self.treatment = treatment
    def get_stemsPerHa(self): return self.stemsPerHa
    def set_stemsPerHa(self, stemsPerHa): self.stemsPerHa = stemsPerHa
    def get_diam(self): return self.diam
    def set_diam(self, diam): self.diam = diam
    def get_height(self): return self.height
    def set_height(self, height): self.height = height
    def get_inspType(self): return self.inspType
    def set_inspType(self, inspType): self.inspType = inspType
    def get_sampleType(self): return self.sampleType
    def set_sampleType(self, sampleType): self.sampleType = sampleType
    def get_comments(self): return self.comments
    def set_comments(self, comments): self.comments = comments
    def get_points(self): return self.points
    def set_points(self, points): self.points = points
    def get_disorders(self): return self.disorders
    def set_disorders(self, disorders): self.disorders = disorders
    def get_identifications(self): return self.identifications
    def set_identifications(self, identifications): self.identifications = identifications
    def hasContent_(self):
        if (
            self.serialNumber is not None or
            self.forestManager is not None or
            self.location is not None or
            self.stand is not None or
            self.siteId is not None or
            self.subSite is not None or
            self.bioRegion is not None or
            self.siteType is not None or
            self.date is not None or
            self.inspector is not None or
            self.hostSpec is not None or
            self.estabYear is not None or
            self.treatment is not None or
            self.stemsPerHa is not None or
            self.diam is not None or
            self.height is not None or
            self.inspType is not None or
            self.sampleType is not None or
            self.comments is not None or
            self.points is not None or
            self.disorders is not None or
            self.identifications is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='inspectionType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('inspectionType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='inspectionType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='inspectionType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='inspectionType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='inspectionType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.serialNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<serialNumber>%s</serialNumber>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.serialNumber), input_name='serialNumber')), eol_))
        if self.forestManager is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<forestManager>%s</forestManager>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.forestManager), input_name='forestManager')), eol_))
        if self.location is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<location>%s</location>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.location), input_name='location')), eol_))
        if self.stand is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<stand>%s</stand>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.stand), input_name='stand')), eol_))
        if self.siteId is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<siteId>%s</siteId>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.siteId), input_name='siteId')), eol_))
        if self.subSite is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<subSite>%s</subSite>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.subSite), input_name='subSite')), eol_))
        if self.bioRegion is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<bioRegion>%s</bioRegion>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.bioRegion), input_name='bioRegion')), eol_))
        if self.siteType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<siteType>%s</siteType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.siteType), input_name='siteType')), eol_))
        if self.date is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<date>%s</date>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.date), input_name='date')), eol_))
        if self.inspector is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<inspector>%s</inspector>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.inspector), input_name='inspector')), eol_))
        if self.hostSpec is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<hostSpec>%s</hostSpec>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.hostSpec), input_name='hostSpec')), eol_))
        if self.estabYear is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<estabYear>%s</estabYear>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.estabYear), input_name='estabYear')), eol_))
        if self.treatment is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<treatment>%s</treatment>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.treatment), input_name='treatment')), eol_))
        if self.stemsPerHa is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<stemsPerHa>%s</stemsPerHa>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.stemsPerHa), input_name='stemsPerHa')), eol_))
        if self.diam is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<diam>%s</diam>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.diam), input_name='diam')), eol_))
        if self.height is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<height>%s</height>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.height), input_name='height')), eol_))
        if self.inspType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<inspType>%s</inspType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.inspType), input_name='inspType')), eol_))
        if self.sampleType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<sampleType>%s</sampleType>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.sampleType), input_name='sampleType')), eol_))
        if self.comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<comments>%s</comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), eol_))
        if self.points is not None:
            self.points.export(outfile, level, namespace_, name_='points', pretty_print=pretty_print)
        if self.disorders is not None:
            self.disorders.export(outfile, level, namespace_, name_='disorders', pretty_print=pretty_print)
        if self.identifications is not None:
            self.identifications.export(outfile, level, namespace_, name_='identifications', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='inspectionType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        if self.serialNumber is not None:
            serialNumber_ = self.serialNumber
            etree_.SubElement(element, '{URN:sps-inspection}serialNumber').text = self.gds_format_string(serialNumber_)
        if self.forestManager is not None:
            forestManager_ = self.forestManager
            etree_.SubElement(element, '{URN:sps-inspection}forestManager').text = self.gds_format_string(forestManager_)
        if self.location is not None:
            location_ = self.location
            etree_.SubElement(element, '{URN:sps-inspection}location').text = self.gds_format_string(location_)
        if self.stand is not None:
            stand_ = self.stand
            etree_.SubElement(element, '{URN:sps-inspection}stand').text = self.gds_format_string(stand_)
        if self.siteId is not None:
            siteId_ = self.siteId
            etree_.SubElement(element, '{URN:sps-inspection}siteId').text = self.gds_format_string(siteId_)
        if self.subSite is not None:
            subSite_ = self.subSite
            etree_.SubElement(element, '{URN:sps-inspection}subSite').text = self.gds_format_string(subSite_)
        if self.bioRegion is not None:
            bioRegion_ = self.bioRegion
            etree_.SubElement(element, '{URN:sps-inspection}bioRegion').text = self.gds_format_string(bioRegion_)
        if self.siteType is not None:
            siteType_ = self.siteType
            etree_.SubElement(element, '{URN:sps-inspection}siteType').text = self.gds_format_string(siteType_)
        if self.date is not None:
            date_ = self.date
            etree_.SubElement(element, '{URN:sps-inspection}date').text = self.gds_format_string(date_)
        if self.inspector is not None:
            inspector_ = self.inspector
            etree_.SubElement(element, '{URN:sps-inspection}inspector').text = self.gds_format_string(inspector_)
        if self.hostSpec is not None:
            hostSpec_ = self.hostSpec
            etree_.SubElement(element, '{URN:sps-inspection}hostSpec').text = self.gds_format_string(hostSpec_)
        if self.estabYear is not None:
            estabYear_ = self.estabYear
            etree_.SubElement(element, '{URN:sps-inspection}estabYear').text = self.gds_format_string(estabYear_)
        if self.treatment is not None:
            treatment_ = self.treatment
            etree_.SubElement(element, '{URN:sps-inspection}treatment').text = self.gds_format_string(treatment_)
        if self.stemsPerHa is not None:
            stemsPerHa_ = self.stemsPerHa
            etree_.SubElement(element, '{URN:sps-inspection}stemsPerHa').text = self.gds_format_string(stemsPerHa_)
        if self.diam is not None:
            diam_ = self.diam
            etree_.SubElement(element, '{URN:sps-inspection}diam').text = self.gds_format_string(diam_)
        if self.height is not None:
            height_ = self.height
            etree_.SubElement(element, '{URN:sps-inspection}height').text = self.gds_format_string(height_)
        if self.inspType is not None:
            inspType_ = self.inspType
            etree_.SubElement(element, '{URN:sps-inspection}inspType').text = self.gds_format_string(inspType_)
        if self.sampleType is not None:
            sampleType_ = self.sampleType
            etree_.SubElement(element, '{URN:sps-inspection}sampleType').text = self.gds_format_string(sampleType_)
        if self.comments is not None:
            comments_ = self.comments
            etree_.SubElement(element, '{URN:sps-inspection}comments').text = self.gds_format_string(comments_)
        if self.points is not None:
            points_ = self.points
            points_.to_etree(element, name_='points', mapping_=mapping_)
        if self.disorders is not None:
            disorders_ = self.disorders
            disorders_.to_etree(element, name_='disorders', mapping_=mapping_)
        if self.identifications is not None:
            identifications_ = self.identifications
            identifications_.to_etree(element, name_='identifications', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'serialNumber':
            serialNumber_ = child_.text
            serialNumber_ = self.gds_validate_string(serialNumber_, node, 'serialNumber')
            self.serialNumber = serialNumber_
        elif nodeName_ == 'forestManager':
            forestManager_ = child_.text
            forestManager_ = self.gds_validate_string(forestManager_, node, 'forestManager')
            self.forestManager = forestManager_
        elif nodeName_ == 'location':
            location_ = child_.text
            location_ = self.gds_validate_string(location_, node, 'location')
            self.location = location_
        elif nodeName_ == 'stand':
            stand_ = child_.text
            stand_ = self.gds_validate_string(stand_, node, 'stand')
            self.stand = stand_
        elif nodeName_ == 'siteId':
            siteId_ = child_.text
            siteId_ = self.gds_validate_string(siteId_, node, 'siteId')
            self.siteId = siteId_
        elif nodeName_ == 'subSite':
            subSite_ = child_.text
            subSite_ = self.gds_validate_string(subSite_, node, 'subSite')
            self.subSite = subSite_
        elif nodeName_ == 'bioRegion':
            bioRegion_ = child_.text
            bioRegion_ = self.gds_validate_string(bioRegion_, node, 'bioRegion')
            self.bioRegion = bioRegion_
        elif nodeName_ == 'siteType':
            siteType_ = child_.text
            siteType_ = self.gds_validate_string(siteType_, node, 'siteType')
            self.siteType = siteType_
        elif nodeName_ == 'date':
            date_ = child_.text
            date_ = self.gds_validate_string(date_, node, 'date')
            self.date = date_
        elif nodeName_ == 'inspector':
            inspector_ = child_.text
            inspector_ = self.gds_validate_string(inspector_, node, 'inspector')
            self.inspector = inspector_
        elif nodeName_ == 'hostSpec':
            hostSpec_ = child_.text
            hostSpec_ = self.gds_validate_string(hostSpec_, node, 'hostSpec')
            self.hostSpec = hostSpec_
        elif nodeName_ == 'estabYear':
            estabYear_ = child_.text
            estabYear_ = self.gds_validate_string(estabYear_, node, 'estabYear')
            self.estabYear = estabYear_
        elif nodeName_ == 'treatment':
            treatment_ = child_.text
            treatment_ = self.gds_validate_string(treatment_, node, 'treatment')
            self.treatment = treatment_
        elif nodeName_ == 'stemsPerHa':
            stemsPerHa_ = child_.text
            stemsPerHa_ = self.gds_validate_string(stemsPerHa_, node, 'stemsPerHa')
            self.stemsPerHa = stemsPerHa_
        elif nodeName_ == 'diam':
            diam_ = child_.text
            diam_ = self.gds_validate_string(diam_, node, 'diam')
            self.diam = diam_
        elif nodeName_ == 'height':
            height_ = child_.text
            height_ = self.gds_validate_string(height_, node, 'height')
            self.height = height_
        elif nodeName_ == 'inspType':
            inspType_ = child_.text
            inspType_ = self.gds_validate_string(inspType_, node, 'inspType')
            self.inspType = inspType_
        elif nodeName_ == 'sampleType':
            sampleType_ = child_.text
            sampleType_ = self.gds_validate_string(sampleType_, node, 'sampleType')
            self.sampleType = sampleType_
        elif nodeName_ == 'comments':
            comments_ = child_.text
            comments_ = self.gds_validate_string(comments_, node, 'comments')
            self.comments = comments_
        elif nodeName_ == 'points':
            obj_ = pointsType.factory()
            obj_.build(child_)
            self.points = obj_
            obj_.original_tagname_ = 'points'
        elif nodeName_ == 'disorders':
            obj_ = disordersType.factory()
            obj_.build(child_)
            self.disorders = obj_
            obj_.original_tagname_ = 'disorders'
        elif nodeName_ == 'identifications':
            obj_ = identificationsType.factory()
            obj_.build(child_)
            self.identifications = obj_
            obj_.original_tagname_ = 'identifications'
# end class inspectionType


class pointsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, datum=None, projection=None, comments=None, point=None):
        self.original_tagname_ = None
        self.datum = datum
        self.projection = projection
        self.comments = comments
        if point is None:
            self.point = []
        else:
            self.point = point
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pointsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pointsType.subclass:
            return pointsType.subclass(*args_, **kwargs_)
        else:
            return pointsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_datum(self): return self.datum
    def set_datum(self, datum): self.datum = datum
    def get_projection(self): return self.projection
    def set_projection(self, projection): self.projection = projection
    def get_comments(self): return self.comments
    def set_comments(self, comments): self.comments = comments
    def get_point(self): return self.point
    def set_point(self, point): self.point = point
    def add_point(self, value): self.point.append(value)
    def insert_point_at(self, index, value): self.point.insert(index, value)
    def replace_point_at(self, index, value): self.point[index] = value
    def hasContent_(self):
        if (
            self.datum is not None or
            self.projection is not None or
            self.comments is not None or
            self.point
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pointsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pointsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pointsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pointsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pointsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pointsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.datum is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<datum>%s</datum>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.datum), input_name='datum')), eol_))
        if self.projection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<projection>%s</projection>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.projection), input_name='projection')), eol_))
        if self.comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<comments>%s</comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), eol_))
        for point_ in self.point:
            point_.export(outfile, level, namespace_, name_='point', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='pointsType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        if self.datum is not None:
            datum_ = self.datum
            etree_.SubElement(element, '{URN:sps-inspection}datum').text = self.gds_format_string(datum_)
        if self.projection is not None:
            projection_ = self.projection
            etree_.SubElement(element, '{URN:sps-inspection}projection').text = self.gds_format_string(projection_)
        if self.comments is not None:
            comments_ = self.comments
            etree_.SubElement(element, '{URN:sps-inspection}comments').text = self.gds_format_string(comments_)
        for point_ in self.point:
            point_.to_etree(element, name_='point', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'datum':
            datum_ = child_.text
            datum_ = self.gds_validate_string(datum_, node, 'datum')
            self.datum = datum_
        elif nodeName_ == 'projection':
            projection_ = child_.text
            projection_ = self.gds_validate_string(projection_, node, 'projection')
            self.projection = projection_
        elif nodeName_ == 'comments':
            comments_ = child_.text
            comments_ = self.gds_validate_string(comments_, node, 'comments')
            self.comments = comments_
        elif nodeName_ == 'point':
            obj_ = pointType.factory()
            obj_.build(child_)
            self.point.append(obj_)
            obj_.original_tagname_ = 'point'
# end class pointsType


class pointType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, east=None, north=None, err=None):
        self.original_tagname_ = None
        self.east = east
        self.north = north
        self.err = err
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, pointType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if pointType.subclass:
            return pointType.subclass(*args_, **kwargs_)
        else:
            return pointType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_east(self): return self.east
    def set_east(self, east): self.east = east
    def get_north(self): return self.north
    def set_north(self, north): self.north = north
    def get_err(self): return self.err
    def set_err(self, err): self.err = err
    def hasContent_(self):
        if (
            self.east is not None or
            self.north is not None or
            self.err is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='pointType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('pointType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='pointType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='pointType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='pointType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='pointType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.east is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<east>%s</east>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.east), input_name='east')), eol_))
        if self.north is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<north>%s</north>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.north), input_name='north')), eol_))
        if self.err is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<err>%s</err>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.err), input_name='err')), eol_))
    def to_etree(self, parent_element=None, name_='pointType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        if self.east is not None:
            east_ = self.east
            etree_.SubElement(element, '{URN:sps-inspection}east').text = self.gds_format_string(east_)
        if self.north is not None:
            north_ = self.north
            etree_.SubElement(element, '{URN:sps-inspection}north').text = self.gds_format_string(north_)
        if self.err is not None:
            err_ = self.err
            etree_.SubElement(element, '{URN:sps-inspection}err').text = self.gds_format_string(err_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'east':
            east_ = child_.text
            east_ = self.gds_validate_string(east_, node, 'east')
            self.east = east_
        elif nodeName_ == 'north':
            north_ = child_.text
            north_ = self.gds_validate_string(north_, node, 'north')
            self.north = north_
        elif nodeName_ == 'err':
            err_ = child_.text
            err_ = self.gds_validate_string(err_, node, 'err')
            self.err = err_
# end class pointType


class disordersType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, disorder=None):
        self.original_tagname_ = None
        if disorder is None:
            self.disorder = []
        else:
            self.disorder = disorder
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, disordersType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if disordersType.subclass:
            return disordersType.subclass(*args_, **kwargs_)
        else:
            return disordersType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_disorder(self): return self.disorder
    def set_disorder(self, disorder): self.disorder = disorder
    def add_disorder(self, value): self.disorder.append(value)
    def insert_disorder_at(self, index, value): self.disorder.insert(index, value)
    def replace_disorder_at(self, index, value): self.disorder[index] = value
    def hasContent_(self):
        if (
            self.disorder
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='disordersType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('disordersType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='disordersType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='disordersType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='disordersType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='disordersType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for disorder_ in self.disorder:
            disorder_.export(outfile, level, namespace_, name_='disorder', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='disordersType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        for disorder_ in self.disorder:
            disorder_.to_etree(element, name_='disorder', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'disorder':
            obj_ = disorderType.factory()
            obj_.build(child_)
            self.disorder.append(obj_)
            obj_.original_tagname_ = 'disorder'
# end class disordersType


class disorderType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, comments=None, agent=None, aspect=None, terrain=None, position=None, type_=None, severity=None, extent=None, incidencePercent=None, isSampleTaken=None):
        self.original_tagname_ = None
        self.name = name
        self.comments = comments
        self.agent = agent
        self.aspect = aspect
        self.terrain = terrain
        self.position = position
        self.type_ = type_
        self.severity = severity
        self.extent = extent
        self.incidencePercent = incidencePercent
        self.isSampleTaken = isSampleTaken
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, disorderType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if disorderType.subclass:
            return disorderType.subclass(*args_, **kwargs_)
        else:
            return disorderType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_comments(self): return self.comments
    def set_comments(self, comments): self.comments = comments
    def get_agent(self): return self.agent
    def set_agent(self, agent): self.agent = agent
    def get_aspect(self): return self.aspect
    def set_aspect(self, aspect): self.aspect = aspect
    def get_terrain(self): return self.terrain
    def set_terrain(self, terrain): self.terrain = terrain
    def get_position(self): return self.position
    def set_position(self, position): self.position = position
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_severity(self): return self.severity
    def set_severity(self, severity): self.severity = severity
    def get_extent(self): return self.extent
    def set_extent(self, extent): self.extent = extent
    def get_incidencePercent(self): return self.incidencePercent
    def set_incidencePercent(self, incidencePercent): self.incidencePercent = incidencePercent
    def get_isSampleTaken(self): return self.isSampleTaken
    def set_isSampleTaken(self, isSampleTaken): self.isSampleTaken = isSampleTaken
    def hasContent_(self):
        if (
            self.name is not None or
            self.comments is not None or
            self.agent is not None or
            self.aspect is not None or
            self.terrain is not None or
            self.position is not None or
            self.type_ is not None or
            self.severity is not None or
            self.extent is not None or
            self.incidencePercent is not None or
            self.isSampleTaken is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='disorderType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('disorderType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='disorderType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='disorderType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='disorderType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='disorderType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<comments>%s</comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), eol_))
        if self.agent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<agent>%s</agent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.agent), input_name='agent')), eol_))
        if self.aspect is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<aspect>%s</aspect>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.aspect), input_name='aspect')), eol_))
        if self.terrain is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<terrain>%s</terrain>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.terrain), input_name='terrain')), eol_))
        if self.position is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<position>%s</position>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.position), input_name='position')), eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<type>%s</type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), eol_))
        if self.severity is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<severity>%s</severity>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.severity), input_name='severity')), eol_))
        if self.extent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<extent>%s</extent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.extent), input_name='extent')), eol_))
        if self.incidencePercent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<incidencePercent>%s</incidencePercent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.incidencePercent), input_name='incidencePercent')), eol_))
        if self.isSampleTaken is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<isSampleTaken>%s</isSampleTaken>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.isSampleTaken), input_name='isSampleTaken')), eol_))
    def to_etree(self, parent_element=None, name_='disorderType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        if self.name is not None:
            name_ = self.name
            etree_.SubElement(element, '{URN:sps-inspection}name').text = self.gds_format_string(name_)
        if self.comments is not None:
            comments_ = self.comments
            etree_.SubElement(element, '{URN:sps-inspection}comments').text = self.gds_format_string(comments_)
        if self.agent is not None:
            agent_ = self.agent
            etree_.SubElement(element, '{URN:sps-inspection}agent').text = self.gds_format_string(agent_)
        if self.aspect is not None:
            aspect_ = self.aspect
            etree_.SubElement(element, '{URN:sps-inspection}aspect').text = self.gds_format_string(aspect_)
        if self.terrain is not None:
            terrain_ = self.terrain
            etree_.SubElement(element, '{URN:sps-inspection}terrain').text = self.gds_format_string(terrain_)
        if self.position is not None:
            position_ = self.position
            etree_.SubElement(element, '{URN:sps-inspection}position').text = self.gds_format_string(position_)
        if self.type_ is not None:
            type__ = self.type_
            etree_.SubElement(element, '{URN:sps-inspection}type').text = self.gds_format_string(type__)
        if self.severity is not None:
            severity_ = self.severity
            etree_.SubElement(element, '{URN:sps-inspection}severity').text = self.gds_format_string(severity_)
        if self.extent is not None:
            extent_ = self.extent
            etree_.SubElement(element, '{URN:sps-inspection}extent').text = self.gds_format_string(extent_)
        if self.incidencePercent is not None:
            incidencePercent_ = self.incidencePercent
            etree_.SubElement(element, '{URN:sps-inspection}incidencePercent').text = self.gds_format_string(incidencePercent_)
        if self.isSampleTaken is not None:
            isSampleTaken_ = self.isSampleTaken
            etree_.SubElement(element, '{URN:sps-inspection}isSampleTaken').text = self.gds_format_string(isSampleTaken_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'comments':
            comments_ = child_.text
            comments_ = self.gds_validate_string(comments_, node, 'comments')
            self.comments = comments_
        elif nodeName_ == 'agent':
            agent_ = child_.text
            agent_ = self.gds_validate_string(agent_, node, 'agent')
            self.agent = agent_
        elif nodeName_ == 'aspect':
            aspect_ = child_.text
            aspect_ = self.gds_validate_string(aspect_, node, 'aspect')
            self.aspect = aspect_
        elif nodeName_ == 'terrain':
            terrain_ = child_.text
            terrain_ = self.gds_validate_string(terrain_, node, 'terrain')
            self.terrain = terrain_
        elif nodeName_ == 'position':
            position_ = child_.text
            position_ = self.gds_validate_string(position_, node, 'position')
            self.position = position_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'severity':
            severity_ = child_.text
            severity_ = self.gds_validate_string(severity_, node, 'severity')
            self.severity = severity_
        elif nodeName_ == 'extent':
            extent_ = child_.text
            extent_ = self.gds_validate_string(extent_, node, 'extent')
            self.extent = extent_
        elif nodeName_ == 'incidencePercent':
            incidencePercent_ = child_.text
            incidencePercent_ = self.gds_validate_string(incidencePercent_, node, 'incidencePercent')
            self.incidencePercent = incidencePercent_
        elif nodeName_ == 'isSampleTaken':
            isSampleTaken_ = child_.text
            isSampleTaken_ = self.gds_validate_string(isSampleTaken_, node, 'isSampleTaken')
            self.isSampleTaken = isSampleTaken_
# end class disorderType


class identificationsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, identification=None):
        self.original_tagname_ = None
        if identification is None:
            self.identification = []
        else:
            self.identification = identification
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, identificationsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if identificationsType.subclass:
            return identificationsType.subclass(*args_, **kwargs_)
        else:
            return identificationsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_identification(self): return self.identification
    def set_identification(self, identification): self.identification = identification
    def add_identification(self, value): self.identification.append(value)
    def insert_identification_at(self, index, value): self.identification.insert(index, value)
    def replace_identification_at(self, index, value): self.identification[index] = value
    def hasContent_(self):
        if (
            self.identification
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='identificationsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('identificationsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificationsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='identificationsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='identificationsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='identificationsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for identification_ in self.identification:
            identification_.export(outfile, level, namespace_, name_='identification', pretty_print=pretty_print)
    def to_etree(self, parent_element=None, name_='identificationsType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        for identification_ in self.identification:
            identification_.to_etree(element, name_='identification', mapping_=mapping_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'identification':
            obj_ = identificationType.factory()
            obj_.build(child_)
            self.identification.append(obj_)
            obj_.original_tagname_ = 'identification'
# end class identificationsType


class identificationType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, name=None, agent=None, family=None, type_=None, labDate=None, dateIdentified=None, person=None, cultureNo=None, retained=None, herbariumNo=None, confidence=None, effect=None, comments=None):
        self.original_tagname_ = None
        self.name = name
        self.agent = agent
        self.family = family
        self.type_ = type_
        self.labDate = labDate
        self.dateIdentified = dateIdentified
        self.person = person
        self.cultureNo = cultureNo
        self.retained = retained
        self.herbariumNo = herbariumNo
        self.confidence = confidence
        self.effect = effect
        self.comments = comments
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, identificationType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if identificationType.subclass:
            return identificationType.subclass(*args_, **kwargs_)
        else:
            return identificationType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_name(self): return self.name
    def set_name(self, name): self.name = name
    def get_agent(self): return self.agent
    def set_agent(self, agent): self.agent = agent
    def get_family(self): return self.family
    def set_family(self, family): self.family = family
    def get_type(self): return self.type_
    def set_type(self, type_): self.type_ = type_
    def get_labDate(self): return self.labDate
    def set_labDate(self, labDate): self.labDate = labDate
    def get_dateIdentified(self): return self.dateIdentified
    def set_dateIdentified(self, dateIdentified): self.dateIdentified = dateIdentified
    def get_person(self): return self.person
    def set_person(self, person): self.person = person
    def get_cultureNo(self): return self.cultureNo
    def set_cultureNo(self, cultureNo): self.cultureNo = cultureNo
    def get_retained(self): return self.retained
    def set_retained(self, retained): self.retained = retained
    def get_herbariumNo(self): return self.herbariumNo
    def set_herbariumNo(self, herbariumNo): self.herbariumNo = herbariumNo
    def get_confidence(self): return self.confidence
    def set_confidence(self, confidence): self.confidence = confidence
    def get_effect(self): return self.effect
    def set_effect(self, effect): self.effect = effect
    def get_comments(self): return self.comments
    def set_comments(self, comments): self.comments = comments
    def hasContent_(self):
        if (
            self.name is not None or
            self.agent is not None or
            self.family is not None or
            self.type_ is not None or
            self.labDate is not None or
            self.dateIdentified is not None or
            self.person is not None or
            self.cultureNo is not None or
            self.retained is not None or
            self.herbariumNo is not None or
            self.confidence is not None or
            self.effect is not None or
            self.comments is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='identificationType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('identificationType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='identificationType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='identificationType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='identificationType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='identificationType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.name is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<name>%s</name>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.name), input_name='name')), eol_))
        if self.agent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<agent>%s</agent>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.agent), input_name='agent')), eol_))
        if self.family is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<family>%s</family>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.family), input_name='family')), eol_))
        if self.type_ is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<type>%s</type>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.type_), input_name='type')), eol_))
        if self.labDate is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<labDate>%s</labDate>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.labDate), input_name='labDate')), eol_))
        if self.dateIdentified is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<dateIdentified>%s</dateIdentified>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.dateIdentified), input_name='dateIdentified')), eol_))
        if self.person is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<person>%s</person>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.person), input_name='person')), eol_))
        if self.cultureNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<cultureNo>%s</cultureNo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.cultureNo), input_name='cultureNo')), eol_))
        if self.retained is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<retained>%s</retained>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.retained), input_name='retained')), eol_))
        if self.herbariumNo is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<herbariumNo>%s</herbariumNo>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.herbariumNo), input_name='herbariumNo')), eol_))
        if self.confidence is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<confidence>%s</confidence>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.confidence), input_name='confidence')), eol_))
        if self.effect is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<effect>%s</effect>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.effect), input_name='effect')), eol_))
        if self.comments is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<comments>%s</comments>%s' % (self.gds_encode(self.gds_format_string(quote_xml(self.comments), input_name='comments')), eol_))
    def to_etree(self, parent_element=None, name_='identificationType', mapping_=None):
        if parent_element is None:
            element = etree_.Element('{URN:sps-inspection}' + name_)
        else:
            element = etree_.SubElement(parent_element, '{URN:sps-inspection}' + name_)
        if self.name is not None:
            name_ = self.name
            etree_.SubElement(element, '{URN:sps-inspection}name').text = self.gds_format_string(name_)
        if self.agent is not None:
            agent_ = self.agent
            etree_.SubElement(element, '{URN:sps-inspection}agent').text = self.gds_format_string(agent_)
        if self.family is not None:
            family_ = self.family
            etree_.SubElement(element, '{URN:sps-inspection}family').text = self.gds_format_string(family_)
        if self.type_ is not None:
            type__ = self.type_
            etree_.SubElement(element, '{URN:sps-inspection}type').text = self.gds_format_string(type__)
        if self.labDate is not None:
            labDate_ = self.labDate
            etree_.SubElement(element, '{URN:sps-inspection}labDate').text = self.gds_format_string(labDate_)
        if self.dateIdentified is not None:
            dateIdentified_ = self.dateIdentified
            etree_.SubElement(element, '{URN:sps-inspection}dateIdentified').text = self.gds_format_string(dateIdentified_)
        if self.person is not None:
            person_ = self.person
            etree_.SubElement(element, '{URN:sps-inspection}person').text = self.gds_format_string(person_)
        if self.cultureNo is not None:
            cultureNo_ = self.cultureNo
            etree_.SubElement(element, '{URN:sps-inspection}cultureNo').text = self.gds_format_string(cultureNo_)
        if self.retained is not None:
            retained_ = self.retained
            etree_.SubElement(element, '{URN:sps-inspection}retained').text = self.gds_format_string(retained_)
        if self.herbariumNo is not None:
            herbariumNo_ = self.herbariumNo
            etree_.SubElement(element, '{URN:sps-inspection}herbariumNo').text = self.gds_format_string(herbariumNo_)
        if self.confidence is not None:
            confidence_ = self.confidence
            etree_.SubElement(element, '{URN:sps-inspection}confidence').text = self.gds_format_string(confidence_)
        if self.effect is not None:
            effect_ = self.effect
            etree_.SubElement(element, '{URN:sps-inspection}effect').text = self.gds_format_string(effect_)
        if self.comments is not None:
            comments_ = self.comments
            etree_.SubElement(element, '{URN:sps-inspection}comments').text = self.gds_format_string(comments_)
        if mapping_ is not None:
            mapping_[self] = element
        return element
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'name':
            name_ = child_.text
            name_ = self.gds_validate_string(name_, node, 'name')
            self.name = name_
        elif nodeName_ == 'agent':
            agent_ = child_.text
            agent_ = self.gds_validate_string(agent_, node, 'agent')
            self.agent = agent_
        elif nodeName_ == 'family':
            family_ = child_.text
            family_ = self.gds_validate_string(family_, node, 'family')
            self.family = family_
        elif nodeName_ == 'type':
            type_ = child_.text
            type_ = self.gds_validate_string(type_, node, 'type')
            self.type_ = type_
        elif nodeName_ == 'labDate':
            labDate_ = child_.text
            labDate_ = self.gds_validate_string(labDate_, node, 'labDate')
            self.labDate = labDate_
        elif nodeName_ == 'dateIdentified':
            dateIdentified_ = child_.text
            dateIdentified_ = self.gds_validate_string(dateIdentified_, node, 'dateIdentified')
            self.dateIdentified = dateIdentified_
        elif nodeName_ == 'person':
            person_ = child_.text
            person_ = self.gds_validate_string(person_, node, 'person')
            self.person = person_
        elif nodeName_ == 'cultureNo':
            cultureNo_ = child_.text
            cultureNo_ = self.gds_validate_string(cultureNo_, node, 'cultureNo')
            self.cultureNo = cultureNo_
        elif nodeName_ == 'retained':
            retained_ = child_.text
            retained_ = self.gds_validate_string(retained_, node, 'retained')
            self.retained = retained_
        elif nodeName_ == 'herbariumNo':
            herbariumNo_ = child_.text
            herbariumNo_ = self.gds_validate_string(herbariumNo_, node, 'herbariumNo')
            self.herbariumNo = herbariumNo_
        elif nodeName_ == 'confidence':
            confidence_ = child_.text
            confidence_ = self.gds_validate_string(confidence_, node, 'confidence')
            self.confidence = confidence_
        elif nodeName_ == 'effect':
            effect_ = child_.text
            effect_ = self.gds_validate_string(effect_, node, 'effect')
            self.effect = effect_
        elif nodeName_ == 'comments':
            comments_ = child_.text
            comments_ = self.gds_validate_string(comments_, node, 'comments')
            self.comments = comments_
# end class identificationType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'inspections'
        rootClass = inspections
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'inspections'
        rootClass = inspections
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    '''Parse a string, create the object tree, and export it.

    Arguments:
    - inString -- A string.  This XML fragment should not start
      with an XML declaration containing an encoding.
    - silence -- A boolean.  If False, export the object.
    Returns -- The root object in the tree.
    '''
    parser = None
    rootNode= parsexmlstring_(inString, parser)
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'inspections'
        rootClass = inspections
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'inspections'
        rootClass = inspections
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from spsclasses import *\n\n')
        sys.stdout.write('import spsclasses as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "disorderType",
    "disordersType",
    "identificationType",
    "identificationsType",
    "inspectionType",
    "inspections",
    "pointType",
    "pointsType"
]
